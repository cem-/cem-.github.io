<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="/includes/css/rssfeed.css" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <atom:link href="https://www.cem.me/cem.rss" rel="self" type="application/rss+xml" />
      <title>CeM - Carl Mehner's Blog</title>
      <link>https://www.cem.me/</link>
      <image>
        <title>CeM - Carl Mehner's Blog</title>
        <url>https://www.cem.me/favicon.png</url>
        <link>https://www.cem.me/</link>
      </image>
      <description>Carl Mehner's Blog on Security, PKI, and computers</description>
      <language>en-us</language>
      <generator>by hand in vim</generator>
      <managingEditor>c+blog@cem.me (Carl Mehner)</managingEditor>
      <webMaster>c+blog@cem.me (Carl Mehner)</webMaster>

    <item>
        <title>ECC Keys (Part 2)</title>
        <link>https://www.cem.me/20180808-ecc-2.html</link>
    <description><![CDATA[

        ]]>
        </description>
        <pubDate>Wed, 08 Aug 2018 08:08:08 -0000</pubDate>
        <guid>https://www.cem.me/20180808-ecc-2.html</guid>
    </item>

    <item>
        <title>ECC keys (Part 1)</title>
        <link>https://www.cem.me/20170410-ecc-1.html</link>
    <description><![CDATA[
<p>Elliptic curve cryptography (ECC) began steadily increasing in normal use across the Internet over the past few years The number of TLS sessions tracked by WikiMedia hovered around 96 percent on average over the course of <a href="https://grafana.wikimedia.org/dashboard/db/tls-ciphers">2016</a>. Nearly everyone uses ECC every day on the Internet. In keeping with this trend, several people have put up some very good tutorials and talks about ECC.
Nick Sullivan wrote an ECC primer when Cloudflare started using certificates that make use of ECC that you can read <a href="https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/">here</a>.
<p>Andrea Corbellini wrote a set of blog posts explaining deeper the way that the ECC maths (addition, multiplication, etc) work on curves with gif visualizations in <a href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/">part 1</a> and how that works on finite fields in <a href="http://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/">part 2</a>.
Martijn Grooten gave a great intro to ECC <a href="https://www.youtube.com/watch?v=yBr3Q6xiTw4">here</a> including a good explaination on the way private keys work and why ECC is faster for point multiplication than for "division", which is essencially the crux of why ECC is considered secure.
<p>Those resources all tend to deal with the math and theory behind ECC, this post is more about how keys are encoded for use in day-to-day use across the Internet and how the different parts of the keys fit into the math behind ECC.
<p>Similar to <a href="https://www.cem.me/20141221-cert-binaries.html">RSA keys</a>, ECC keys are encoded for storage and transmission using ASN.1 and the binary ASN.1 values are sometimes then encoded further as base64. There are a few different ways to encode EC keys, but one of the most common (currently) is SEC1 (Standards for Efficient Cryptography, specification 1).
This first example is the Curve P-256 encoded to explicitly include all the P-256 parameters from the SEC1.
<br>
<img src="https://www.cem.me/art/cryptoposters/p256_exp.png" alt="p-256 with explicit parameters" >
<p>The entire encoded key is wrapped in an ASN.1 sequence the same as <a href="https://www.cem.me/20141221-cert-binaries.html">RSA keys</a>. Next, a version number to allow for future changes in the way keys are stored. (So far, it doesnâ€™t look like this will be used any time soon. Incrementing the version number was planned for RFC 5480, but did not make it past the draft process.)
After the the version field, is the private key. For elliptic curves, the private key is simply a random number, in this case, 256 random bits.
The next section is the elliptic curve domain parameters, which contains the public, agreed upon, parameters for the particular curve. In this section, we have the typical version number at the start, followed by the OID (Object IDentifier) stating that this information is for an ANSI X9.62 type curve and the field size of that curve. The field size is the length, in bits, of the finite field that makes up the plane in which the elliptic curve operates.
The next part of the explicit parameters is the Curve Info, this section tells the way to initialize the curve equation before beginning the cryptographic calculations. The first two elements of this section are 'a' and 'b', the multiplicand and addend, respectively, of the curve equation, y^2 = x^3 + ax + b. The final piece is the seed value; this is the controversial part of P-256, any discussion around backdoors or weakness tend to center around this discrete value. The seed value is "random", then is hashed and run through an algorithm to get the addend "b" encoded previously. It is included in the curve parameters for verification purposes. The algorithm for verification and generation are found in the <a href="http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf">NIST Digital Signature Standard</a>.
Following the curve parameters is the base point, the starting point for the math involved with the curve. Harkening back to Martijn's talk on ECC, at about the 10 minute mark, you can see where this base point come into play (or you could wait a few more paragraphs). The base point is encoded in a different way than most of the other cryptographic values we use in certificates. First, all the information is retrieved from an octet string.
The first byte of this octet string is a flag to notate whether or not the base point is encoded in the (not often used) compressed form (<code>0x02</code> or <code>0x03</code>) or the uncompressed form (<code>0x04</code>). If the flag is for the uncompressed form, as it is in this example, the remainder of the octet string is evenly divided into two parts, the x-coordinate and the y-coordinate. If the flag is set to use a compressed form, the value depends on the value of the y-coordinate (<code>0x02</code>, if even and <code>0x03</code> if odd), the remainer of the octet string is the x-coordinate.
The x-coordinate in the compressed form the y-coordinate simply calculated based off of the curve parameters. The order, a prime value, and the cofactor follow as the last of the domain parameters for the curve. Multiplying the order and cofactor give the total number of available points that are on this curve.
The final part of the ECC key is the data describing the public key. It is encoded in the same manner as the basepoint from before; compression flag, x-coordinate, then (if needed) the y-coordinate. The public key here is used in a similar fashion to the public key in RSA cryptography, however, instead of being generated by multiplying two primes, it is created by adding the basepoint to itself the number of times, as specified in the private key.
<p>When using a curve encoded without the explicit parameters included, the result is much shorter. Also, since curves, like P-256 and other "NIST Curves", are widely supported in crypto libraries and software packages, the explicit parameters are typically left out and instead replaced with the named curve's identifier. For P-256, the OID is 1.2.840.100.45.3.1.7; this simple set of numbers replaces all of the domain parameters previously described.
<br><img src="https://www.cem.me/art/cryptoposters/p256.png" alt="p-256 with implicit parameters" >
<p>Other curves standardized prior to around 2010, such as the ones used in OpenSSL 1.0.1 and earlier, follow these forms of either the, little used, explicit curve or the curve forms with implicit parameters. Examples include other NIST curves or the Brainpool curves.
<p>One example of an alternate curve using a very similar form is the secp256k1. This is the elliptic curve used in Bitcoin. The only difference between the non-explicit parameter p-256 and secp256k1 is the OID used to identify the curves (and the public / private key pair).
<br><img src="https://www.cem.me/art/cryptoposters/secp256k1.png" alt="secp256 with implicit parameters" >
<p>When the explicit parameters are added to the secp256k1, it is easier to see the differences between it and P-256. The first difference is the field size: in 256k1, the field size is slightly larger than the P-256 field. Next, the main difference; constants a and b in this curve are 0 and 7, respectively rather than the much larger a and b from P-256. The k in secp256k1 stands for Koblitz, named after Neal Koblitz, a University of Washington professor. Koblitz curves are known for their speed as well as the lack of a seed of random/unexplained origin. The remaining elements very similar to the p-256 curve.
<br><img src="https://www.cem.me/art/cryptoposters/secp256k1_exp.png" alt="secp256 with explicit parameters" >
<p>The next post, ECC (Part 2), will have some newer curves that have been recently gaining popularity and standardization. To make sure you see that when it is published, subscribe on <a href="http://cloud.feedly.com/#subscription%2Ffeed%2Fhttp%3A%2F%2Fwww.cem.me%2Fcem.rss">Feedly</a>, or anywhere else using <a href="https://www.cem.me/cem.rssf">RSS</a>

        ]]>
        </description>
        <pubDate>Tue, 11 Apr 2017 04:20:00 -0000</pubDate>
        <guid>https://www.cem.me/20170410-ecc-1.html</guid>
    </item>
    <item>
        <title>OS X Keychain Key Export Authentication Bypass</title>
        <link>https://www.cem.me/20160108-keychain.html</link>
    <description><![CDATA[
<p>
This vulnerability allows anyone, with log-on access to an OS X machine, the ability to export private keys from the system keystore of OS X. Normally, there are two ways to stop this, only system administrators would have access to use or export system keys and they can be made non-exportable for any user. However, for this vulnerability, those two mitigations matter not. Normally, one would need to authenticate as an administrator, but as you can see below, Appleâ€™s authentication procedure does not error out properly. This means that if an administrator has deployed a certificate solely, meant for system use, anyone else now can use it for their own purposes. </p>
<p><b>Note:</b>I believe this is the same as CVE-2015-7058, however, I never recived official confirmation of that from Apple. It does seem the same, and appears to be fixed at this time.
</p>
<br />
<h3>Disclosure Timeline:</h3>
<p>
<ul>
<li>2015-03-12: Initial discovery</li>
<li>2015-03-13: Reported to Apple</li>
<li>2015-03-17: Apple responded they are investigating</li>
<li>2015-12-08: Update released</li>
<li>2015-12-10: Asked for confirmation that <a href="http://lists.apple.com/archives/security-announce/2015/Dec/msg00005.html">CVE-2015-7058</a> was the same vuln I reported - crickets.</li>
<li>2016-01-06: Public Disclosure</li>
</ul>
</p>

<h3>Technical Details &amp; Description</h3>

<h5>Affected Product Details:</h5>
<p>
OS X before 10.11.2<br />
Apple iOS before 9.2<br />
Apple tvOS before 9.1</p>

<h5>Security Risk:</h5>
<p>
A non-privileged user is able to export keys and certificate
 they should not have access to export. Additionally, they
 are able to deactivate the non-exportable flag on the key
 if it was originally imported with '-x'.</p>

<h5>How to recreate results / PoC:</h5>
<p><i>Prerequisites</i></p>
<p>
Either:<br />
 An asymmetric key exists in the system keystore and is
 marked as non-exportable. A user (with administrator or
 non-administrator system access) exists such that said 
 user desires the p and q (aka.
<a href="http://www.cem.me/20141221-cert-binaries.html">private key</a>).</p>
<p>
Or, an asymmetric key exists in the system keystore that
 is exportable by administrators only. A non-administrator
 exists that wants the key.</p>

<h5>The "Attack"</h5>
<p>
A user logs into the machine.
Open Keychain Access, select the system keystore
Select the key to export, perform a 'secondary click' (aka 'right-click') on
the key, select the export menu item.</p>
<dl>
<dt>
A prompt appears asking for a location to save the key:
<dd> Choose a place to save the key
<dt>A prompt appears to request administrator level credentials:
<dd> <i>Gently press the escape key once.</i>
<dd> The key is now exportable (if it wasn't before).
<dt>A prompt appears to set the exported keyâ€™s passphrase.
<dd> Choose to enter a password, or leave it blank. Click OK.
<dd> The user now has a pkcs#12 file complete with the private key.
</dl>

<h5>Speculation below!</h5>

<p>From what I can tell, the code would be something similar to this:</p>

<div class="snippet">
<pre>
<code>

public void exportCertFromKeychain(certID cert) {
bool exportable = true;
	// get place to store exported cert 
	// this should only happen after authorization!
	filename f = getExportLocation();
	// check if access is locked down to only allow
	//   administrators, or if it is non-exportable
	if(isProtected(cert)) {
		// get Authorization 
		int authResult = authenticateAdmin();
/* Authentication returns several different codes
0 is errAuthorizationSuccess
-60005 is errAuthorizationDenied
-60006 is errAuthorizationCanceled */
		if(authResult == 0)
			// here is the non-exportable bug
			// this should be the first thing checked..
			if(markedNonExportable(certID))
				exportable = false;
else if(authResult == -60005) // here is the admin bug
			exportable = false;
		// they should check if 'authResult' was 0,
		// and if not, set the value to false
		// when you cancel, the result is -60006
		// and 'exportable' remains true.
		
	}
// get export password
	string pass = getPassword();
	if(exportable) {
		exportCert(f, cert);
	} else {
		showError();
	}
}

</code>
</pre>
</div>
        ]]>
        </description>
        <pubDate>Fri, 08 Jan 2016 06:06:06 -0000</pubDate>
        <guid>https://www.cem.me/20160108-keychain.html</guid>
    </item>


    <item>
        <title>PGP ASCII Art</title>
        <link>https://www.cem.me/20150706-pgp-art.html</link>
	<description><![CDATA[
<div class="pgp">
<span class="pgp">
-----BEGIN PGP PUBLIC KEY BLOCK-----<br />
Version: GnuPG v1<br />
<br />
mQENBFWE8g8BCADWwAC1DXKsqGPZU0/OlzZvXr7waI1a15VdeocA5ILIU4IoSlne<br />
9ZLhH/38qRWyk2sS8BtaD3DbA1Izz0STuiztyVOjbKk0yjKL3pWwpaWajD5AyhvV<br />
Ln50e4s9RfyLw1OnOtCeN4G9OgR7Rrqr4JPdF09wUFgYVUWdeOmw9MGIdfTXadey<br />
sU4vTt0maghZa0wDdcnfNFK/7VWJpbqttHncWWLAkLqhirSZA6wU4GRWlNQvsYbJ<br />
BRVs+YrzewxpmBdiIjaTCeBSJPlEyLWlMw6ZPqzheSHjksuL6ElgDP5BZzYAPGCT<br />
xrVHztT2u79M1I/wpPylGaaZgg+D2coTFIAvABEBAAG2AAACt0NhcmwgTSAoLi4u<br />
</span><span class="pgpCarl">
X</span><span class="pgpCEM">C4rI</span><span class="pgpCarl">XxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXX</span><span class="pgpCEM">C4rI</span><span class="pgpCarl">XxX</span><br />
<span class="pgpArt">
I11II11II11II11II11II11II11II11II11II11II11II11II11II11II11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000O000O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000O000O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I <br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I <br />
I11II11II11II11II11II11II11II11II11II11II11II11II11II11II11II11I<br />
<span class="pgpCarl">X</span><span class="pgpCEM">C4rI</span><span class="pgpCarl">XxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXX</span><span class="pgpCEM">C4rI</span><span class="pgpCarl">XxX</span><br />
</span><span class="pgp">
KSA8Y0BjZW0ubWU+iQE4BBMBAgAiBQJVhPIPAhsDBgsJCAcDAgYVCAIJCgsEFgID<br />
AQIeAQIXgAAKCRBrDTHS1xnT+4mjB/0VXjlVNflzT3qaseILatLSSAt2t1nnBGxs<br />
iJVdgIlQj2vYgb6IkmkeEsmu6avAgFktM0zM5uosx+VDxdI5v1CIUqxjWSDhOeMK<br />
Q3E9BEK/yRrehPKe3Y/NAwaVI67C393jRSuVFPoNFViNfr1ZJU8TGUYOnO2ap+9Q<br />
XlPdEXWXEyXg9luXOJl8H95XX+7b7DiStfAn3A4SXhtChDpMEkSdMD+brryB65Wh<br />
epc7BIqkQyG0w70z22KUXDPeOEdmhEY03grMBpF4MguU7bmHQgI8wFY6rFde7RXz<br />
4djsY/CILcITJcFVM0kThsMphsqLUVCvdFeK/vdZUazA3U/fnj7XuQENBFWE8g8B<br />
CADYXMKMFTfq4BNF66KvI4uAlEg+zQyMRV49IAlxXA3oCKlkxzKvsvACOfjjvPcd<br />
5DLkYA9PYZVaSWO4EU70F9chxxPA5Qkz7Y6/0wL5X3hD0fbmLtr6d0EzclhJPJ6a<br />
XAcVBsY6QZRK4ulHp1xDbGnxVbL+Gi0w0gqKSa5vI94+aP+zFdBUFvZAa9hL7ez3<br />
nm3V8H62X3Tj0Q8eCtCb3dgvDo4dRRJPOXAmydpCCZbH4EF8qI9d5Oup3FW6I8K+<br />
5Zj5OfNAwSnsp3aTIBDq2BxxN6w0CwmnBxMDjho1KwBnxDF5DAX0kJGUjAQr7EGy<br />
23SVqbXxVByWB2pGMIY1ZoozABEBAAGJAR8EGAECAAkFAlWE8g8CGwwACgkQaw0x<br />
0tcZ0/s8ZwgAunktEwPOVDTqcDn39xigdslKikqWFZGZZlp2XwIUToc+wH6qAw8h<br />
/Fc+gXT9YWc+866E3GNOuNAjY4mF/7mLorIhyVuL4lfdfxq33AKa55Bb2QpBc7iA<br />
nVt1knLWBJ9sr2SaFsGDxEfRIJ3OxcXQOCfxtSzLnaH4TnVN45yflCkhcObYVg7X<br />
1sReDDoRJmROOwi+riinSbohVRcNydx6RxaI3acH939IeGCCUUKvd87ShZjw/MxP<br />
8Z6U0qgNnXrOWtTFjLkSt0e1p1JKklc0TYkIwCaSVYeTYH/ycgEg2m/HfKMQueBY<br />
z8QGH8j84zQb4rjCI1gIwfQUbK/bmzcV7A==
<br />
=JyOF
<br />
-----END PGP PUBLIC KEY BLOCK-----
</span>
</div>

<p>While I was making the <a href="https://www.cem.me/20150621-pgp-poster.html">PGP Poster</a> I noticed that the User ID Packet, while broken apart in the UI into: Name, Email, and Comment, was in actuality just a large UTF-8 string. My imagination was spurred on by thoughts of interesting things I could do in that field, I recalled the math done by <a href="https://rya.nc/cert-tricks.html" target="_blank">Ryan Castellucci</a> allowing him to embed messages in an SSL certificate's public key. However, that only allowed for around one line of text, and the message had to be short to not affect the resultant prime. I wanted to be able to create a multiline message that would allow the creation of ASCII-style art. Of course, the User ID packet in the PGP key is ideal since you can put a large amount of arbitrary UTF-8 text inside.</p>

<p>The hardest part is translating UTF-8 into Base64 art. You cannot simply create a great piece of Base64 ASCII Art and throw it into the User ID packet because you first need valid UTF-8. </p>

<p>The translation between UTF-8 and Base64 is tricky because they are 8 and 6 bits respectively. One way to consistently take care of this problem is to find the least common multiple of 6 and 8, which is 24. Dividing 24 by 6 shows that we will have 4 Base64-character blocks to use as our <q>building blocks</q> for the ASCII Art (which if you have not figured out by now is really UTF-8 Artâ€¦ but that is not as fun to say and there is really not a big difference).</p>

<p>The image below illustrates that showing UTF-8 characters translated into binary (split into 8-bits) and that binary, evenly divided into 6-bit chunks and translated into Base64.
<img src="https://www.cem.me/art/utf2b64.svg" alt="utf8 to base64 translation"/></p>

<p>Next, I wrote a script that printed out all of the valid UTF-8 characters in groups of 3 as translated to the 4 characters of Base64.</p>
<pre>
<code>
#!/usr/bin/python
import base64

for x in range(33, 127) : # printable utf-8
    for y in range(33, 127) :
        for z in range(33, 127) :
            s = chr(x) + chr(y) + chr(z)
            print (base64.b64encode(s, None))
</code>
</pre>
<p>This was a bit unwieldy; rather than search through nearly a half million patterns,  I wrote some regex to map out a few of the groups of characters that I thought would make good candidates.</p>

<p>I came up with a few patterns to use; XC4r IXxX XXxX to put across the top and bottom (hint: it spells out â€˜xCARLxxxxxxxâ€™) then, to spell out CEM in the middle I used I11I and O000.</p>

<p>The next thing is to pad out the beginning of the User ID packet up to the output newline boundary. This was done by calculating the amount of characters needed and adding that many spaces to the front part of the User ID packet using my poster from the previous post.</p>

<p>Finally, start the key generation process and when it is time for the User ID input part, the default format from PGP keys is <q>&lt;Name&gt; (&lt;Comment&gt;) &lt;Email&gt;</q>. Make sure you factored the name and open parenthesis into the padding you needed, type the name and then, when asked, paste in the UTF-8 encoded Base64 ASCII art. The key generates encoding your glorious block of ASCII art. Print it out in the <a href="https://tools.ietf.org/html/rfc4880#section-6.2" target="_blank">ASCII Armor</a>'d <a href="https://tools.ietf.org/html/rfc4880#section-2.4" target="_blank">Radix-64</a> that we all know and love as a PGP Key and behold:</p>


<div class="pgp">
<span class="pgp">
-----BEGIN PGP PUBLIC KEY BLOCK-----<br />
Version: GnuPG v1<br />
<br />
mQENBFWE8g8BCADWwAC1DXKsqGPZU0/OlzZvXr7waI1a15VdeocA5ILIU4IoSlne<br />
9ZLhH/38qRWyk2sS8BtaD3DbA1Izz0STuiztyVOjbKk0yjKL3pWwpaWajD5AyhvV<br />
Ln50e4s9RfyLw1OnOtCeN4G9OgR7Rrqr4JPdF09wUFgYVUWdeOmw9MGIdfTXadey<br />
sU4vTt0maghZa0wDdcnfNFK/7VWJpbqttHncWWLAkLqhirSZA6wU4GRWlNQvsYbJ<br />
BRVs+YrzewxpmBdiIjaTCeBSJPlEyLWlMw6ZPqzheSHjksuL6ElgDP5BZzYAPGCT<br />
xrVHztT2u79M1I/wpPylGaaZgg+D2coTFIAvABEBAAG2AAACt0NhcmwgTSAoLi4u<br />
</span><span class="pgpCarl">
X</span><span class="pgpCEM">C4rI</span><span class="pgpCarl">XxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXX</span><span class="pgpCEM">C4rI</span><span class="pgpCarl">XxX</span><br />
<span class="pgpArt">
I11II11II11II11II11II11II11II11II11II11II11II11II11II11II11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000O000O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000O000O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I<br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I <br />
I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000O000O000</span><span class="pgpArt">I11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11II11I</span><span class="pgpCEM">O000</span><span class="pgpArt">I11II11I <br />
I11II11II11II11II11II11II11II11II11II11II11II11II11II11II11II11I<br />
<span class="pgpCarl">X</span><span class="pgpCEM">C4rI</span><span class="pgpCarl">XxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXXXxXX</span><span class="pgpCEM">C4rI</span><span class="pgpCarl">XxX</span><br />
</span><span class="pgp">
KSA8Y0BjZW0ubWU+iQE4BBMBAgAiBQJVhPIPAhsDBgsJCAcDAgYVCAIJCgsEFgID<br />
AQIeAQIXgAAKCRBrDTHS1xnT+4mjB/0VXjlVNflzT3qaseILatLSSAt2t1nnBGxs<br />
iJVdgIlQj2vYgb6IkmkeEsmu6avAgFktM0zM5uosx+VDxdI5v1CIUqxjWSDhOeMK<br />
Q3E9BEK/yRrehPKe3Y/NAwaVI67C393jRSuVFPoNFViNfr1ZJU8TGUYOnO2ap+9Q<br />
XlPdEXWXEyXg9luXOJl8H95XX+7b7DiStfAn3A4SXhtChDpMEkSdMD+brryB65Wh<br />
epc7BIqkQyG0w70z22KUXDPeOEdmhEY03grMBpF4MguU7bmHQgI8wFY6rFde7RXz<br />
4djsY/CILcITJcFVM0kThsMphsqLUVCvdFeK/vdZUazA3U/fnj7XuQENBFWE8g8B<br />
CADYXMKMFTfq4BNF66KvI4uAlEg+zQyMRV49IAlxXA3oCKlkxzKvsvACOfjjvPcd<br />
5DLkYA9PYZVaSWO4EU70F9chxxPA5Qkz7Y6/0wL5X3hD0fbmLtr6d0EzclhJPJ6a<br />
XAcVBsY6QZRK4ulHp1xDbGnxVbL+Gi0w0gqKSa5vI94+aP+zFdBUFvZAa9hL7ez3<br />
nm3V8H62X3Tj0Q8eCtCb3dgvDo4dRRJPOXAmydpCCZbH4EF8qI9d5Oup3FW6I8K+<br />
5Zj5OfNAwSnsp3aTIBDq2BxxN6w0CwmnBxMDjho1KwBnxDF5DAX0kJGUjAQr7EGy<br />
23SVqbXxVByWB2pGMIY1ZoozABEBAAGJAR8EGAECAAkFAlWE8g8CGwwACgkQaw0x<br />
0tcZ0/s8ZwgAunktEwPOVDTqcDn39xigdslKikqWFZGZZlp2XwIUToc+wH6qAw8h<br />
/Fc+gXT9YWc+866E3GNOuNAjY4mF/7mLorIhyVuL4lfdfxq33AKa55Bb2QpBc7iA<br />
nVt1knLWBJ9sr2SaFsGDxEfRIJ3OxcXQOCfxtSzLnaH4TnVN45yflCkhcObYVg7X<br />
1sReDDoRJmROOwi+riinSbohVRcNydx6RxaI3acH939IeGCCUUKvd87ShZjw/MxP<br />
8Z6U0qgNnXrOWtTFjLkSt0e1p1JKklc0TYkIwCaSVYeTYH/ycgEg2m/HfKMQueBY<br />
z8QGH8j84zQb4rjCI1gIwfQUbK/bmzcV7A==
<br />
=JyOF
<br />
-----END PGP PUBLIC KEY BLOCK-----
</span>
</div>



		]]>
        </description>
        <pubDate>Mon, 06 Jul 2015 05:05:05 -0000</pubDate>
        <guid>https://www.cem.me/20150706-pgp-art.html</guid>
    </item>


   <item>
        <title>PGP Poster</title>
        <link>https://www.cem.me/20150621-pgp-poster.html?s=r</link>
	<description><![CDATA[
  <p>Pretty Good Privacy (PGP) has been around since 1991, it has since gained notoriety and ubiquity as one of the most popular<sup>[citation needed]</sup> person to person publication privacy programs. Now <a href="https://keybase.io/cem_">keybase.io</a> and even <a href="https://www.facebook.com/notes/protecting-the-graph/securing-email-communications-from-facebook/1611941762379302">Facebook</a> are allowing users to receive encrypted communications from their systems, whether or not that is a <a href="http://blog.cryptographyengineering.com/2014/08/whats-matter-with-pgp.html">good idea</a>.</p> 

<p>After learning about the ins and outs of <a href="https://www.cem.me/pki/index.html">certificate structures</a>, I tuned to PGP to learn how they are put together. Some of it is quite elegant, and allows the format to save space, especially in the packet headers where 2 bytes can convey essentially the same information that take 6 bytes in <a href="https://www.cem.me/20150209-cert-binaries-4.html">x.509</a>. PGP keys are made up of these packets, each packet is used to convey information about the key as a whole. By default, a key has 5 packets; Public Key (for signing), User ID (just text), Signature packet (times, algorithms, settings, and the Signature [over the Public Key, User ID, and most of the signature packet]), sub-key (for encrypting), and the sub-key signature.</p>

<p>Each header starts with a 8-bit value. The first bit is always set, the second is a switch between old and new packet styles (the new style is used for tag types represented by values larger than 4 bits, by default, keys just have old style), for the old style bits 3 through 6 indicate the <a href="https://tools.ietf.org/html/rfc4880#section-4.3">packet type</a>, the last 2 bits tell the number of length bits that immediately follow the header packet.</p>

<p>The public key packet contains the signing data and certifying otherâ€™s keys, the key for encrypting the data is the sub-key. The User ID packet is just UTF-8 data, this is normally a name, email address, and a comment from the owner (there is quite a bit of room here to store data... make sure you subscribe with <a href='http://cloud.feedly.com/#subscription%2Ffeed%2Fhttp%3A%2F%2Fwww.cem.me%2Fcem.rss'>feedly</a>, or with <a href="https://www.cem.me/cem.rss">rss here</a>). The two signature packets are used to show binding between a held private key by signing the hash of the public key in the particular packet (key or sub-key), and the information specified in the signature packet. Within the signature packet, there are several <a href="https://tools.ietf.org/html/rfc4880#section-5.2.3.1">sub-packets</a> that can contain a multitude of data from signature time policy data like what the key should be used for. This data is encoded in various ways from actual integer values, to hexadecimal values denoting particular values, and binary values where each bit adds a new flag value.</p>

<p>Here is a posterized PGP key, it uses RSA keys (only 1024-bit for brevity) for both signing and encrypting and has an expiration date, the other values are just the OpenPGP defaults.</p>

<a href="https://dl.dropboxusercontent.com/u/25625347/PGP_Pub.png" target="_blank"><img src="https://dl.dropboxusercontent.com/u/25625347/PGP_Pub.png" alt="PGP Public Key" /></a>

         ]]>
        </description>
        <pubDate>Wed, 22 Jun 2016 02:30:30 -0000</pubDate>
        <guid>https://www.cem.me/20150621-pgp-poster.html?s=r</guid>
   </item>

    <item>
        <title>Certificate Binary Posters</title>
        <link>https://www.cem.me/pki/index.html?s=r</link>
	<description><![CDATA[
 <p>This is a series of posters and along with explanations of what they mean. They go through the entire lifecycle of an SSL certificate; from the creation of the p and q for the private key, to the signing from the certificate authority, and finally to the inclusion of the serial number in revocation structures.</p>

<p><small>
This was originally released as a series of posts. They are still available here: (<a href="https://www.cem.me/20141221-cert-binaries.html">one</a>, <a href="https://www.cem.me/20150104-cert-binaries-2.html">two</a>, <a href="https://www.cem.me/20150121-cert-binaries-3.html">three</a>, <a href="https://www.cem.me/20150209-cert-binaries-4.html">four</a>, <a href="https://www.cem.me/20150301-cert-binaries-5.html">five</a>, <a href="https://www.cem.me/20150315-cert-binaries-6.html">six</a>, and <a href="https://www.cem.me/20150401-cert-binaries-7.html">seven</a>.)</small>
</p>


<a href="https://www.cem.me/pki/index.html"><img src="https://www.cem.me/art/posters.png" alt="posters" /></a>

<p>If you want some high quality prints, or just want to support my work and get cool things to put on your wall you can do that <a href="https://www.redbubble.com/people/cem-/collections/377869-pki-posters">here</a> (you can get a <a href="https://www.redbubble.com/people/cem-/calendars/14447568-pki-poster-calendar">PKI Poster Calendar</a> and watch a cert throughout its lifecycle over a year).
</p>
 
		]]>
        </description>
        <pubDate>Sun, 21 Dec 2014 06:31:24 +0000</pubDate>
        <guid>https://www.cem.me/20141221-cert-binaries.html</guid>
    </item>

    <item>
        <title>HTTP DANE Validation Assertion</title>
        <link>https://www.cem.me/20141203-hdva.html?s=r</link>
        <description><![CDATA[
  <p>Certificates are typically authenticated via a chain of signatures that lead back to any one of a number of trusted roots. DNSSEC is validated much the same way, however, with DNSSEC there's only one root for delegating authority for the DNS while in certificates, any certificate authority can sign a certificate valid for any domain. There is a way to use this delegated system to verify connections made over TLS called DANE. In short, DANE is a way to use the DNSSEC to get signed records from an authoritative source to validate certificates used in TLS. You can see a great introduction to DANE by the working group co-chair here:<br /> <a target="_blank" href="https://www.youtube.com/watch?v=emDxUQl1NvA">https://www.youtube.com/watch?v=emDxUQl1NvA</a><br /> Also, some recent slides from a presentation by Dan York are here: <br /><a target="_blank" href="http://www.slideshare.net/Deploy360/3-dnssec-and-dane-ion-tokyo">http://www.slideshare.net/Deploy360/3-dnssec-and-dane-ion-tokyo</a>.</p>

  <p>In all things there is risk, there are ways to mitigate risk using controls, some are detective controls (CT) some are preventative (DANE, Public Key Pinning). Other's have developed many different ideas in how to ensure that the certificate that makes it to the client's browser is the one which the site owner intended. Some have done analysis of the different methods [<a target="_blank" href="https://mediatum.ub.tum.de/node?id=1182735">Ralph Holz</a>][<a target="_blank" href="http://queue.acm.org/detail.cfm?id=2668154">Ben Laurie</a>][<a target="_blank" href="http://www.scriptjunkie.us/2013/12/a-comparison-of-https-reforms/">Matt Weeks</a>]. A <a target="_blank" href="http://www.securityweek.com/convergence-replacement-throwdown-dane-vs-tack-vs-ct">SecurityWeek</a> article today even positions CT as a replacement for the preventive controls of TACK and DANE. I like certificate transparency (CT) as a way to detect CA compromise, but that is only after the fact (somthing I think that is not quite pointed out in the comparison chart at <a target="_blank" href="http://www.certificate-transparency.org/comparison">certificate-transparency.org</a> or in Ben's ACM article from above). However, for a real-time preventitive control, I prefer DANE.</p>

  <hr />
<p>Recently, I uploaded a draft to the IETF with the goal of furthering the adoption of DANE.<br />
<a target="_blank" href="https://datatracker.ietf.org/doc/draft-cem-dane-assertion/">https://datatracker.ietf.org/doc/draft-cem-dane-assertion/</a></p>

<p>Currently the adoption of DANE is lacking in browsers. The draft I wrote is to allow particular sites to declare themselves as ready to support DANE so that they can further lock down the security of their TLS connections. The method is to use an HTTP "Dane-Validation-Assertion" header or HDVA. I envision this as working as follows: A site sends the DVA header to a browser that tells the browser the browser will then do a lookup over DNSSEC for a TLSA (DANE) record to perform additional validations on the certificate.</p>

<p>Options for this header include the max time to keep/remember the assertion, a way to include subdomains, and a way to require a valid DANE response before continuing. The max-age and include-subdomains are used in the same manner as HTTP Strict Transport Security (HSTS</a>) and HTTP Public Key Pinning (HPKP</a>), the '<a href="http://tools.ietf.org/html/draft-cem-dane-assertion-00#section-2.1.3" target="_blank">require</a>' however, is a concept specific HDVA. The reason I included this directive was because the way DANE works; if you receive a certificate that is valid through the regular means of validating using certificate authorities (PKIX) and do not receive any DANE records, the connection will continue. By using the 'require' directive, the server operator forces the connection to be validated using the traditional method of CAs accompanied by DANE or solely by using DANE.</p>


	]]>
        </description>
        <pubDate>Thu, 4 Dec 2014 05:00:00 GMT</pubDate>
        <guid>https://www.cem.me/20141203-hdva.html</guid>
</item>

    <item>
        <title>iOS 8.1 and CVE-2014-4449</title>
        <link>https://www.cem.me/papers/cve-2014-4449.html?s=r</link>
        <description><![CDATA[
  <p>Today, Apple released security advisory <a href="http://support.apple.com/en-us/HT203119" target="_blank">APPLE-SA-2014-10-20-1</a> for iOS 8.1 that includes <a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-4449" target="_blank">CVE-2014-4449</a>.</p>
  <p>This relates to a TLS certificate validation vulnerability in the clients accessing iCloud affecting bookmarks, calendar, tasks, and possibly other data types allowing for modification and disclosure of data.</p>
  <p>Exposure of sensitive reminders, meetings, bookmarks (including bookmarklets that could allow logins to other saved websites). Users may store sensitive data within these data objects that are synced to iCloud, these are at risk of exposure through this vulnerability.</p>
  <dl>
  <dt><b>Data Disclosed Includes:</b></dt>
  <dd>User Display Name</dd>
  <dd>Apple DAV Push Token</dd>
  <dd>Owner ID</dd>
  <dd>X-MobileMe-Auth Token (encoded in b64, prepended Owner ID)</dd>
  <dd>Push Key (prepended Owner ID)</dd>
  <dd>DAV Sync Token</dd>
  <dd>
   <dl>
    <dt><b>The full gziped text of the following data types:</b></dt>
    <dd>Reminders</dd>
    <dd>Calendar Events</dd>
    <dd>Safari Bookmarks</dd>
   </dl>
  </dd>
  </dl>
  
  <dl>
  <dt><b>Connections not validated include:</b></dt>
  <dd>p11-caldav.icloud.com</dd>
  <dd>p11-bookmarks.icloud.com</dd>
  </dl>
  <pre>
<code>
Vulnerability Disclosure Timeline:
==================================
2014-07-15:     Researcher discovery
2014-07-16:     Vendor Notification
2014-07-17:     Vendor Confirmation of reciept of report
2014-10-02:     Vendor Response/Feedback
2014-10-20:     Vendor Fix/Patch
2014-10-20:     Public Disclosure

Impact
==================================
CVSS Severity (version 2.0):
CVSS v2 Base Score: 6.8 (MEDIUM)
Impact Subscore: 6.4
Exploitability Subscore: 8.6
CVSS Version 2 Metrics:
Access Vector: Network exploitable
Access Complexity: Medium
Authentication: Not required to exploit
Impact Type: Allows unauthorized disclosure of
    information; Allows unauthorized modification;
    Allows disruption of service
</code>
  </pre>

  <p><i>--speculation ahead--</i><br />According to <a href="https://www.youtube.com/watch?v=cwmmLRUYaQ8" target="_blank">ElcomSoft</a>, a Russian mobile forensics company, the data gathered from the MobileMe-Auth Token might be able to be used to get additional authentication tokens as well as a number of other interesting things like iOS iCloud backups. These are encrypted using retrievable keys that are also stored in the cloud.</p>
  <p>So, assumedly, one executing an attack on CVE-2014-4449, would have the ability to not only see just the data going over the unauthenticated streams to the calendar, reminders, and bookmarks, but also could pivot those authentication keys to download and decrypt backups of iOS devices. Once a backup is retrieved and decrypted the attacker has access to all of the iPhone data using a variety of free or paid tools for forensic analysis.</p>

  ]]>
        </description>
        <pubDate>Mon, 20 Oct 2014 12:30:00 GMT</pubDate>
        <guid>https://www.cem.me/papers/cve-2014-4449.html</guid>
        </item>

   </channel>
</rss>

