<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <atom:link href="https://www.cem.me/cem.rss" rel="self" type="application/rss+xml" />
      <title>CeM - Carl Mehner's Blog</title>
      <link>https://www.cem.me/</link>
      <image>
        <title>CeM - Carl Mehner's Blog</title>
        <url>https://www.cem.me/favicon.png</url>
        <link>https://www.cem.me/</link>
      </image>
      <description>Carl Mehner's Blog on Security, PKI, and computers</description>
      <language>en-us</language>
      <generator>by hand in vim</generator>
      <managingEditor>c+blog@cem.me (Carl Mehner)</managingEditor>
      <webMaster>c+blog@cem.me (Carl Mehner)</webMaster>

    <item>
        <title>Certificate Binary Posters (Part Three)</title>
	<link>https://www.cem.me/20150121-cert-binaries-3.html</link>
	<description><![CDATA[
	  <p><small>If you missed the previous posts, you may want to read them first (<a href="20141221-cert-binaries.html">Part One</a>, <a href="20150104-cert-binaries-2.html">Part Two</a>)</small></p>  
  <p>This first part is a building block for more wonderful things to come. The Distinguished Name for x.500 are the basis for identity and trust on the Internet. You may notice that the base64 in the upper left is a certificate request, I highlighted the bytes to pull out of that to show this detailed view in order to clarify this more complex block. Each of the names in the that make up the distinguished name are an ASN.1 'set' containing a 'sequence' of the attribute type and the value of the attribute. The attribute type is an OID (Object IDentifier), a hierarchical structure used to describe namespaces. All of the OIDs here are under the x.500 attribute types namespace. Second within the set, after the OID, is the value associated to it: country, state, local, et seq. This is encoded in the UTF-8 (<b>U</b>niversal Character Set + <b>T</b>ransformation <b>F</b>ormat).</p>
  <a href="https://plus.google.com/photos/+CarlMehner/albums/6105920604274654785/6105920707666080834"><img src="https://lh4.googleusercontent.com/-gG1aAE7ovog/VLyWiHcjdEI/AAAAAAAAF8U/xzhuasDqrGQ/s800/DNx500.png" alt="x.500 - DN" /></a>
  <p>The base64 in the top left of this next poster is the same as the last, however, as the last focused on the DN, this focuses on most of the rest. I say most because the sequence immediately following the DN is a PKCS#1 object. This is the same thing I went over at the end of <a href="20141221-cert-binaries.html">part one</a>.</p>
  <p>CSRs are sent to a certificate authority which they then use to produce a signed certificate for use in TLS to secure websites, or any number of other x.509/PKI applications.</p>
  <p>The entire CSR is contained in one large sequence. Within that is a sequence of request data followed by the CSR signature algorithm and lastly the signature value.</p>
  <p>The request data is made up of a version (value of 0, meaning of 1; <small>remember computer scientists count from 0...</small>), the DN above (which specifies the request identification information), after that is the PKCS#1 object (identical to the PKCS#1 public key poster). Lastly is the attributes section, here it is empty. The attributes are defined in a PKCS#9 objects. This field is little used now, but at one point it was used to add passwords that the requestor would have to provide at the time of revocation to authenticate to the revocation system.</p>
  <a href="https://plus.google.com/photos/+CarlMehner/albums/6105920604274654785/6105920735563250578"><img src="https://lh3.googleusercontent.com/-RAXYcgi2FuE/VLyWjvXwe5I/AAAAAAAAF8c/0zAYKNR0YY4/s800/p10.png" alt="pkcs10" /></a>
  <p>Next, what the certificate authority sends back.</p>
		]]>
        </description>
        <pubDate>Thu, 22 Jan 2015 02:30:00 +0000</pubDate>
	<guid>https://www.cem.me/20150121-cert-binaries-3.html</guid>
    </item>

    <item>
        <title>Certificate Binary Posters (Part Two)</title>
        <link>https://www.cem.me/20141221-cert-binaries-2.html</link>
	<description><![CDATA[
  <p><small>If you missed the previous post, you may want to read that first (<a href="20141221-cert-binaries.html">Part One</a>)</small></p>
  <p>The previous post shows one way to store private keys, the PKCS#1 format. This post shows a different format, PKCS#8. This format is more extensible, allowing for more than just the one type of key to be stored. This format splits up the private key representation into three sections: a version, an algorithm identifier, and the actual private key. The version is set at 0, and may eventually change if there are any updates to the standard. The algorithm ID is an OID defined as "RSA Encryption" for use with the PKCS#1 standard. That is to say, the very same standard we went over in the previous post. The last part is a wrapper for the PKCS#1 private key object. This is the exact same thing byte for byte as the PKCS#1 private key.</p>

  <a href="https://picasaweb.google.com/lh/photo/6zamMivAFuluJ1V-6_GLW9MTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh6.googleusercontent.com/-okA540VQO9Y/VKoiagfxR5I/AAAAAAAAF6c/19IW110wZek/s800/pkcs8nocrypt.png" alt="private key" /></a>

  <p>Unprotected private keys like that are not the best thing to keep laying around, luckily, there's another version of the PKCS#8 which holds an encrypted version of the private key. This format is broken into two pieces, an encryption algorithm and the encrypted data. The encryption algorithm starts with the algorithm identifier for the Password Based Encryption Scheme. The next section is a container for the parameters and data needed to derive the encryption key. For this example I chose to use the Password Based Encryption Scheme #2 (better known as PBKDF2). Fed into the BPKDF2 are the salt, the number of times to run the pseudorandom function over the passphrase used to encrypt the key. Next is the encryption scheme, AES-256-CBC and the initialization vector for the AES algorithm. The key resulting from the PBKDF2 and the salt are fed in as parameters to the AES function along with the message found in the encrypted data section. The result of the decryption is a BER (Basic Encoding Rules) encoded octet string. An octet string you may recognize from above (hint: it's the private key sequence).</p>

  <a href="https://picasaweb.google.com/lh/photo/UMWSoooFF6Z2LPrn7jqMQ9MTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh4.googleusercontent.com/-KqYOjtYetuY/VBPdlSev4QI/AAAAAAAAE7Q/x507WauWmYs/s800/pkcs8encd.png" alt="encrypted private key" /></a>

  <p>Also, please note, AES is not the default algorithm for encrypting keys in openssl. The less secure, 3DES is the default, for openssl you must specify '-aes256' on the commandline to the genrsa or rsa command line applications.</p>
		]]>
        </description>
        <pubDate>Mon, 05 Jan 2015 06:00:00 +0000</pubDate>
        <guid>https://www.cem.me/20141221-cert-binaries-2.html</guid>
    </item>
      

    <item>
        <title>Certificate Binary Posters (Part One)</title>
        <link>https://www.cem.me/20141221-cert-binaries.html</link>
	<description><![CDATA[
	  <header>
	  <h1 class="title"><a href="https://www.cem.me/20141221-cert-binaries.html">Certificate Binary Posters (Part One)</a></h1>
	  <time class="pubdate" datetime="2012-12-21">2014-12-21</time>
  </header>
  <p>To better understand the ins and outs of TLS certificates and the way they are stored in files, I decided to do a short series on the different PKCS (Public Key Cryptography Standards) that dissects each individual byte of the certificate or key file. This is part one which covers the public and private keys stored in the PKCS #1 format.</p>
  <p>The core and heart of a certificate are keys. Certificates utilize both public and private keys which are mathematically bound. The PKCS #1 standard includes both public and private key formats. The first step is to create the private key. Here is the way it's represented: on the top left - the binary file encoded in base64 (easiest for emailing or copy-pasting), below that - expanded into binary, and on the right - each byte expanded into what it means.</p>
  <a href="https://picasaweb.google.com/lh/photo/IBaE8vtc37W87HHgASU7l9MTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh5.googleusercontent.com/-71toRXOy-DI/VBPdlb4knJI/AAAAAAAAE7I/r8eBViG6z7E/s800/private%2520key.png" alt="private key" /></a>
  <p>The p and q are two random primes, e is an exponent used as part of the math, the value of e is typically the same across all certs. All of the other values are calculated based off of p, q, e and specific mathematical functions. n is the result of multiplying p and q, d is equal to e<sup>-1</sup> &#37; (n - (p + q -1)), all the other formulas are noted on the chart. The calculated values are all used extensively during crypto operations and are stored in the file to make those crypto operations faster.</p>
  <p>The public key, as stored in the PKCS#1 format starts off with a wrapper of two main sections, a descriptor of the algorithm and second, the bits in the public key. The descriptor holds the OID (Object IDentifier) of the encryption algorithm for which this key is to be used. The key includes same values that may look familiar: n and e, the multiplied primes used as the modulus and the exponent the message to encrypt is raised to the power of when encrypting.</p>
  <a href="https://picasaweb.google.com/lh/photo/8gkuddZIn1OAONZx9KQzltMTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh4.googleusercontent.com/-C40S_qivW34/VAZ_50rqpmI/AAAAAAAAE4Q/16xE0X3FsY0/s800/public%2520key.png" alt="public key" /></a>

		]]>
        </description>
        <pubDate>Sun, 21 Dec 2014 06:31:24 +0000</pubDate>
        <guid>https://www.cem.me/20141221-cert-binaries.html</guid>
    </item>

    <item>
        <title>HTTP DANE Validation Assertion</title>
        <link>https://www.cem.me/20141203-hdva.html</link>
        <description><![CDATA[
  <p>Certificates are typically authenticated via a chain of signatures that lead back to any one of a number of trusted roots. DNSSEC is validated much the same way, however, with DNSSEC there's only one root for delegating authority for the DNS while in certificates, any certificate authority can sign a certificate valid for any domain. There is a way to use this delegated system to verify connections made over TLS called DANE. In short, DANE is a way to use the DNSSEC to get signed records from an authoritative source to validate certificates used in TLS. You can see a great introduction to DANE by the working group co-chair here:<br /> <a target="_blank" href="https://www.youtube.com/watch?v=emDxUQl1NvA">https://www.youtube.com/watch?v=emDxUQl1NvA</a><br /> Also, some recent slides from a presentation by Dan York are here: <br /><a target="_blank" href="http://www.slideshare.net/Deploy360/3-dnssec-and-dane-ion-tokyo">http://www.slideshare.net/Deploy360/3-dnssec-and-dane-ion-tokyo</a>.</p>

  <p>In all things there is risk, there are ways to mitigate risk using controls, some are detective controls (CT) some are preventative (DANE, Public Key Pinning). Other's have developed many different ideas in how to ensure that the certificate that makes it to the client's browser is the one which the site owner intended. Some have done analysis of the different methods [<a target="_blank" href="https://mediatum.ub.tum.de/node?id=1182735">Ralph Holz</a>][<a target="_blank" href="http://queue.acm.org/detail.cfm?id=2668154">Ben Laurie</a>][<a target="_blank" href="http://www.scriptjunkie.us/2013/12/a-comparison-of-https-reforms/">Matt Weeks</a>]. A <a target="_blank" href="http://www.securityweek.com/convergence-replacement-throwdown-dane-vs-tack-vs-ct">SecurityWeek</a> article today even positions CT as a replacement for the preventive controls of TACK and DANE. I like certificate transparency (CT) as a way to detect CA compromise, but that is only after the fact (somthing I think that is not quite pointed out in the comparison chart at <a target="_blank" href="http://www.certificate-transparency.org/comparison">certificate-transparency.org</a> or in Ben's ACM article from above). However, for a real-time preventitive control, I prefer DANE.</p>

  <hr />
<p>Recently, I uploaded a draft to the IETF with the goal of furthering the adoption of DANE.<br />
<a target="_blank" href="https://datatracker.ietf.org/doc/draft-cem-dane-assertion/">https://datatracker.ietf.org/doc/draft-cem-dane-assertion/</a></p>

<p>Currently the adoption of DANE is lacking in browsers. The draft I wrote is to allow particular sites to declare themselves as ready to support DANE so that they can further lock down the security of their TLS connections. The method is to use an HTTP "Dane-Validation-Assertion" header or HDVA. I envision this as working as follows: A site sends the DVA header to a browser that tells the browser the browser will then do a lookup over DNSSEC for a TLSA (DANE) record to perform additional validations on the certificate.</p>

<p>Options for this header include the max time to keep/remember the assertion, a way to include subdomains, and a way to require a valid DANE response before continuing. The max-age and include-subdomains are used in the same manner as HTTP Strict Transport Security (HSTS</a>) and HTTP Public Key Pinning (HPKP</a>), the '<a href="http://tools.ietf.org/html/draft-cem-dane-assertion-00#section-2.1.3" target="_blank">require</a>' however, is a concept specific HDVA. The reason I included this directive was because the way DANE works; if you receive a certificate that is valid through the regular means of validating using certificate authorities (PKIX) and do not receive any DANE records, the connection will continue. By using the 'require' directive, the server operator forces the connection to be validated using the traditional method of CAs accompanied by DANE or solely by using DANE.</p>


	]]>
        </description>
        <pubDate>Thu, 4 Dec 2014 05:00:00 GMT</pubDate>
        <guid>https://www.cem.me/20141203-hdva.html</guid>
</item>

    <item>
        <title>iOS 8.1 and CVE-2014-4449</title>
        <link>https://www.cem.me/papers/cve-2014-4449.html</link>
        <description><![CDATA[
  <p>Today, Apple released security advisory <a href="http://support.apple.com/en-us/HT203119" target="_blank">APPLE-SA-2014-10-20-1</a> for iOS 8.1 that includes <a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-4449" target="_blank">CVE-2014-4449</a>.</p>
  <p>This relates to a TLS certificate validation vulnerability in the clients accessing iCloud affecting bookmarks, calendar, tasks, and possibly other data types allowing for modification and disclosure of data.</p>
  <p>Exposure of sensitive reminders, meetings, bookmarks (including bookmarklets that could allow logins to other saved websites). Users may store sensitive data within these data objects that are synced to iCloud, these are at risk of exposure through this vulnerability.</p>
  <dl>
  <dt><b>Data Disclosed Includes:</b></dt>
  <dd>User Display Name</dd>
  <dd>Apple DAV Push Token</dd>
  <dd>Owner ID</dd>
  <dd>X-MobileMe-Auth Token (encoded in b64, prepended Owner ID)</dd>
  <dd>Push Key (prepended Owner ID)</dd>
  <dd>DAV Sync Token</dd>
  <dd>
   <dl>
    <dt><b>The full gziped text of the following data types:</b></dt>
    <dd>Reminders</dd>
    <dd>Calendar Events</dd>
    <dd>Safari Bookmarks</dd>
   </dl>
  </dd>
  </dl>
  
  <dl>
  <dt><b>Connections not validated include:</b></dt>
  <dd>p11-caldav.icloud.com</dd>
  <dd>p11-bookmarks.icloud.com</dd>
  </dl>
  <pre>
<code>
Vulnerability Disclosure Timeline:
==================================
2014-07-15:     Researcher discovery
2014-07-16:     Vendor Notification
2014-07-17:     Vendor Confirmation of reciept of report
2014-10-02:     Vendor Response/Feedback
2014-10-20:     Vendor Fix/Patch
2014-10-20:     Public Disclosure

Impact
==================================
CVSS Severity (version 2.0):
CVSS v2 Base Score: 6.8 (MEDIUM)
Impact Subscore: 6.4
Exploitability Subscore: 8.6
CVSS Version 2 Metrics:
Access Vector: Network exploitable
Access Complexity: Medium
Authentication: Not required to exploit
Impact Type: Allows unauthorized disclosure of
    information; Allows unauthorized modification;
    Allows disruption of service
</code>
  </pre>

  <p><i>--speculation ahead--</i><br />According to <a href="https://www.youtube.com/watch?v=cwmmLRUYaQ8" target="_blank">ElcomSoft</a>, a Russian mobile forensics company, the data gathered from the MobileMe-Auth Token might be able to be used to get additional authentication tokens as well as a number of other interesting things like iOS iCloud backups. These are encrypted using retrievable keys that are also stored in the cloud.</p>
  <p>So, assumedly, one executing an attack on CVE-2014-4449, would have the ability to not only see just the data going over the unauthenticated streams to the calendar, reminders, and bookmarks, but also could pivot those authentication keys to download and decrypt backups of iOS devices. Once a backup is retrieved and decrypted the attacker has access to all of the iPhone data using a variety of free or paid tools for forensic analysis.</p>

  ]]>
        </description>
        <pubDate>Mon, 20 Oct 2014 12:30:00 GMT</pubDate>
        <guid>https://www.cem.me/papers/cve-2014-4449.html</guid>
        </item>

   </channel>
</rss>

